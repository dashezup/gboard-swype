##
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
#parse("utils/constants.vm")
#if ($schema.getNamespace())
package $schema.getNamespace();
#end

@SuppressWarnings("all")
#if($schema.getProp($deprecated))@Deprecated
#end
public class ${this.mangle($schema.getName())}
  extends com.swiftkey.avro.BaseGenericRecord
  implements com.touchtype.telemetry.events.ParcelableTelemetryEvent {

  private volatile static org.apache.avro.Schema schema = null;

  private final static Object recordKey = new Object();
  private final static String[] keys = new String[] {
    #foreach($field in $schema.getFields())"${field.name()}"#if($velocityCount < $schema.getFields().size()), #end#end

  };

#foreach ($field in $schema.getFields())
#if ($field.doc())
  /** $field.doc() */
#end
#foreach ($annotation in $this.javaAnnotations($field))
  @$annotation
#end
  #if (${this.publicFields()})public#elseif (${this.privateFields()})private#end ${this.javaUnbox($field.schema())} ${this.mangle($field.name(), $schema.isError())};
#end

#if ($schema.getFields().size() > 0)
  /**
   * All-args constructor.
#foreach ($field in $schema.getFields())
#if ($field.doc())   * @param ${this.mangle($field.name())} $field.doc()
#end
#end
   */
  public ${this.mangle($schema.getName())}(#foreach($field in $schema.getFields())
#if(!$field.getProp($deprecated) && !$field.getProp($scrub))#if(!$foreach.first), #end
${this.javaType($field.schema())} ${this.mangle($field.name())}#end#end) {
    super(
      new Object[] {
#foreach($field in $schema.getFields())
        #if($field.getProp($deprecated) || $field.getProp($scrub))null#else${this.mangle($field.name())}#end#if($foreach.hasNext),#end

#end
      },
      keys,
      recordKey);
#foreach($field in $schema.getFields())
#if(!$field.getProp($deprecated) && !$field.getProp($scrub))
    this.${this.mangle($field.name())} = ${this.mangle($field.name())};
#end
#end
  }
  #else
  public ${this.mangle($schema.getName())}() {
    super(new Object[0], keys, recordKey);
  }
  #end

  private ${this.mangle($schema.getName())}(android.os.Parcel in) {
    this(
      #foreach($field in $schema.getFields())#if(!$field.getProp($deprecated) && !$field.getProp($scrub))#if(!$foreach.first),
      #end(${this.javaUnbox($field.schema())}) in.readValue(${this.mangle($schema.getName())}.class.getClassLoader())#end#end

    );
  }

  public static org.apache.avro.Schema getClassSchema() {
    org.apache.avro.Schema returnedSchema = schema;
    if (returnedSchema == null) {
      synchronized(recordKey) {
        returnedSchema = schema;
        if (returnedSchema == null) {
          schema = returnedSchema = new org.apache.avro.Schema.Parser().parse(${this.javaSplit($schema.toString())});
        }
      }
    }
    return returnedSchema;
  }

#if($hasDeprecatedField)
  private void setDefaults(org.apache.avro.Schema schema) {
#foreach($field in $schema.getFields())
#if($field.getProp($deprecated) || $field.getProp($scrub))
    this.${this.mangle($field.name())} = (${this.javaType($field.schema())}) org.apache.avro.specific.SpecificData.get().getDefaultValue(schema.getFields().get($field.pos()));
    put($field.pos(), this.${this.mangle($field.name())});
#end#end
  }
#end

  public org.apache.avro.Schema getSchema() {
    org.apache.avro.Schema schema = getClassSchema();
#if($hasDeprecatedField)
    setDefaults(schema);
#end
    return schema;
  }

  public int describeContents() {
    return 0;
  }

  public void writeToParcel(android.os.Parcel out, int flags) {
    #foreach($field in $schema.getFields())#if(!$field.getProp($deprecated) && !$field.getProp($scrub))out.writeValue(this.${field.name()});
    #end#end

  }

  public static final android.os.Parcelable.Creator<${this.mangle($schema.getName())}> CREATOR
       = new android.os.Parcelable.Creator<${this.mangle($schema.getName())}>() {

    public ${this.mangle($schema.getName())} createFromParcel(android.os.Parcel in) {
       return new ${this.mangle($schema.getName())}(in);
    }

    public ${this.mangle($schema.getName())}[] newArray(int size) {
       return new ${this.mangle($schema.getName())}[size];
    }
  };

}
